source("~/code/CLC-PROJECT-5/plot-prec-behav-score-vs-vaccination.R")
source("~/code/CLC-PROJECT-5/plot-prec-behav-score-vs-vaccination.R", echo=TRUE)
colnames(network_member_dt)
# Add vertex attributes for vaccination status
ego_vax_status <- setNames(ego_dt$FUVA3, ego_dt$MTURKID)
ego_vax_status
alter_vax_status <- setNames(network_member_dt$SN37, network_member_dt$alterID)
# Assign vaccination status to vertices
V(g)$vaccine_status <- ego_vax_status[V(g)$name]
## Create the edge list
edge_list <- as.matrix(network_member_dt[, c("MTURKID", "alterID")])
g <- igraph::graph_from_edgelist(edge_list)
## Add vertex attributes for vaccination status
ego_vax_status <- setNames(ego_dt$FUVA3, ego_dt$MTURKID)
alter_vax_status <- setNames(network_member_dt$SN37, network_member_dt$alterID)
## Assign vaccination status to vertices
V(g)$vaccine_status <- ego_vax_status[V(g)$name]
V(g)$vaccine_status[is.na(V(g)$vaccine_status)] <- alter_vax_status[V(g)$name]
## Define colors
V(g)$color <- ifelse(V(g)$vaccine_status == 1, "green",
ifelse(V(g)$vaccine_status == 2, "red", "white"))
alter_vax_status
length(ego_vax_status)
length(alter_vax_status)
table(ego_vax_status, exclude = "NULL")
table(alter_vax_status, exclude = "NULL")
## Create the edge list
edge_list <- as.matrix(network_member_dt[, c("MTURKID", "alterID")])
g <- igraph::graph_from_edgelist(edge_list)
## Add vertex attributes for vaccination status
ego_vax_status <- setNames(ego_dt$FUVA3, ego_dt$MTURKID)
alter_vax_status <- setNames(network_member_dt$SN37, network_member_dt$alterID)
length(ego_vax_status)
table(ego_vax_status, exclude = "NULL")
length(alter_vax_status)
table(alter_vax_status, exclude = "NULL")
## Assign vaccination status to vertices
V(g)$vaccine_status <- ego_vax_status[V(g)$name]
names(ego_vax_status)
V(g)
V(g)$name
head(V(g)$name)
head(V(g)$name, 25)
# Create the edge list
edge_list <- as.matrix(network_member_dt[, c("MTURKID", "alterID")])
g <- igraph::graph_from_edgelist(edge_list, directed = FALSE)
# Create the edge list
edge_list <- as.matrix(network_member_dt[, c("MTURKID", "alterID")])
g <- igraph::graph_from_edgelist(edge_list, directed = FALSE)
# Assign names to vertices
V(g)$name <- as.character(V(g)$name)
# Separate ego and alter IDs
ego_ids <- unique(ego_dt$MTURKID)
alter_ids <- unique(network_member_dt$alterID)
# Create named vectors for vaccination status
ego_vax_status <- setNames(ego_dt$FUVA3, ego_ids)
alter_vax_status <- setNames(network_member_dt$SN37, alter_ids)
table(ego_vax_status, exclude = NULL)
table(alter_vax_status, exclude = NULL)
# Extract base ego IDs from alter IDs
base_alter_ids <- sub("_\\d+$", "", alter_ids)
table(base_alter_ids, exclude = NULL)
# Create a combined vaccination status vector
combined_vax_status <- c(ego_vax_status, setNames(alter_vax_status, base_alter_ids))
table(combined_vax_status, exclude = NULL)
table(V(g)$vaccine_status)
# Assign vaccination status to vertices
V(g)$vaccine_status <- combined_vax_status[V(g)$name]
table(combined_vax_status, exclude = NULL)
# Check for NAs and assign unknown status where necessary
V(g)$vaccine_status[is.na(V(g)$vaccine_status)] <- NA
# Create a combined vaccination status vector
combined_vax_status <- c(ego_vax_status, setNames(alter_vax_status, base_alter_ids))
table(combined_vax_status, exclude = NULL)
# Assign vaccination status to vertices
V(g)$vaccine_status <- combined_vax_status[V(g)$name]
# Load necessary libraries
library(haven)
library(dplyr)
library(data.table)
library(igraph)
library(ggplot2)
library(ggraph)
library(psych)
# Read Data ----------
## Location
data_loc <- "/Volumes/caas/CADRE CLC Data Project5/Clean Data/AK-SU-NETWORKS-ROUT/"
network_env <- readRDS(paste0(data_loc, "network_objects.rds"))
names(network_env)
## Ego Data
sns_consenting_dt <- as.data.table(network_env$sns_consenting_dt)
## Network Data
sns_dt_long_wide_no_minors <- as.data.table(network_env$sns_dt_long_wide_no_minors)
# Inspect data ---------
## Ego Data
dim(sns_consenting_dt)
colnames(sns_consenting_dt)
table(sns_consenting_dt$FUVA3, exclude = NULL) #vaccination status of egos
## Network Data
dim(sns_dt_long_wide_no_minors)
table(sns_dt_long_wide_no_minors$SN37, exclude = NULL) ## vaccination status of alters
#### RECEIVED AT LEAST ONE VACCINE DOSE (SN37)
# if the network member has received at least one dose of the COVID-19
# vaccine (SN37),
# o	Yes  (1)
# o	No  (2)
# o	Don't know  (3)
# Matching ---------
unique_network_mturk_ids <- unique(sns_dt_long_wide_no_minors$MTURKID)
unique_ego_mturk_ids <- unique(sns_consenting_dt$MTURK1)
length(which(unique_ego_mturk_ids %in% unique_network_mturk_ids))
# Rename the datasets  more meaningfully ---------
ego_dt <- sns_consenting_dt
network_member_dt <- sns_dt_long_wide_no_minors
# Plot the data -----------
# Create the edge list
edge_list <- as.matrix(network_member_dt[, c("MTURKID", "alterID")])
g <- igraph::graph_from_edgelist(edge_list, directed = FALSE)
# Assign names to vertices
V(g)$name <- as.character(V(g)$name)
# Separate ego and alter IDs
ego_ids <- unique(ego_dt$MTURKID)
alter_ids <- unique(network_member_dt$alterID)
# Create named vectors for vaccination status
ego_vax_status <- setNames(ego_dt$FUVA3, ego_ids)
alter_vax_status <- setNames(network_member_dt$SN37, alter_ids)
table(ego_vax_status, exclude = NULL)
table(alter_vax_status, exclude = NULL)
# Extract base ego IDs from alter IDs
base_alter_ids <- sub("_\\d+$", "", alter_ids)
table(base_alter_ids, exclude = NULL)
# Create a combined vaccination status vector
combined_vax_status <- c(ego_vax_status, setNames(alter_vax_status, base_alter_ids))
table(combined_vax_status, exclude = NULL)
# Assign vaccination status to vertices
V(g)$vaccine_status <- combined_vax_status[V(g)$name]
# Create a named vector for vaccination status
combined_vax_status <- c(ego_vax_status, alter_vax_status)
# Create a new named vector to store the vaccination status with the correct suffixes
vaccine_status_with_suffix <- setNames(vector("integer", length(V(g))), V(g)$name)
# Loop through each vertex name and assign the correct vaccination status
for (vertex_name in V(g)$name) {
base_id <- sub("_\\d+$", "", vertex_name)
vaccine_status_with_suffix[vertex_name] <- combined_vax_status[base_id]
}
# Check the names of combined_vax_status
combined_vax_status_names <- names(combined_vax_status)
head(combined_vax_status_names)
# Extract base IDs from vertex names
base_ids_from_vertices <- unique(sub("_\\d+$", "", V(g)$name))
# Check if all base IDs exist in combined_vax_status
missing_base_ids <- base_ids_from_vertices[!base_ids_from_vertices %in% combined_vax_status_names]
missing_base_ids
ego_vax_status
# Combine the vectors
combined_vax_status <- c(ego_vax_status, alter_vax_status)
combined_vax_status <- combined_vax_status[!is.na(names(combined_vax_status))]
combined_vax_status
combined_vax_status
# Check the names of combined_vax_status
combined_vax_status_names <- names(combined_vax_status)
head(combined_vax_status_names)
source("~/code/CLC-PROJECT-5/plot-prec-behav-score-vs-vaccination.R", echo=TRUE)
# Check if all base IDs exist in combined_vax_status
missing_base_ids <- base_ids_from_vertices[!base_ids_from_vertices %in% combined_vax_status_names]
# Print missing base IDs, if any
if (length(missing_base_ids) > 0) {
print(missing_base_ids)
} else {
print("All base IDs are present in combined_vax_status.")
}
# Extract base IDs from vertex names
base_ids_from_vertices <- unique(sub("_\\d+$", "", V(g)$name))
# Check if all base IDs exist in combined_vax_status
missing_base_ids <- base_ids_from_vertices[!base_ids_from_vertices %in% combined_vax_status_names]
# Print missing base IDs, if any
if (length(missing_base_ids) > 0) {
print(missing_base_ids)
} else {
print("All base IDs are present in combined_vax_status.")
}
# Create a new named vector to store the vaccination status with the correct suffixes
vaccine_status_with_suffix <- setNames(vector("character", length(V(g))), V(g)$name)
# Loop through each vertex name and assign the correct vaccination status
for (vertex_name in V(g)$name) {
base_id <- sub("_\\d+$", "", vertex_name)
if (base_id %in% names(combined_vax_status)) {
vaccine_status_with_suffix[vertex_name] <- combined_vax_status[base_id]
} else {
vaccine_status_with_suffix[vertex_name] <- NA
}
}
# Assign the vaccination status to vertices
V(g)$vaccine_status <- vaccine_status_with_suffix[V(g)$name]
# Check the assignment
table(V(g)$vaccine_status, exclude = NULL)
# Check the assignment
table(V(g)$vaccine_status, exclude = NULL)
# Define color palette for the vaccination status
color_palette_vax <- c("1" = "green", "2" = "red", "NA" = "white")
# Plot the network with vaccination status
ggraph(g, layout = 'kk') +
geom_edge_link() +
geom_node_point(aes(color = factor(vaccine_status)), size = 3) +
scale_color_manual(values = color_palette_vax, na.translate = TRUE) +
theme_void() +
labs(color = "Vaccination Status")
# Plot the network with vaccination status using layout_with_fr
ggraph(g, layout = 'fr') +  # Using the Fruchterman-Reingold layout
geom_edge_link() +
geom_node_point(aes(color = factor(vaccine_status)), size = 3) +
scale_color_manual(values = color_palette_vax, na.translate = TRUE) +
theme_void() +
labs(color = "Vaccination Status")
# Plot the network with vaccination status using layout_with_kk
ggraph(g, layout = 'kk') +  # Using the Kamada-Kawai layout
geom_edge_link() +
geom_node_point(aes(color = factor(vaccine_status)), size = 3) +
scale_color_manual(values = color_palette_vax, na.translate = TRUE) +
theme_void() +
labs(color = "Vaccination Status")
# Plot the network with vaccination status using layout_with_fr
ggraph(g, layout = 'fr') +  # Using the Fruchterman-Reingold layout
geom_edge_link() +
geom_node_point(aes(color = factor(vaccine_status)), size = 3) +
scale_color_manual(values = color_palette_vax, na.translate = TRUE) +
theme_void() +
labs(color = "Vaccination Status")
# Plot the network with vaccination status
ggraph(g, layout = 'kk') +
geom_edge_link() +
geom_node_point(aes(color = factor(vaccine_status)), size = 3) +
scale_color_manual(values = color_palette_vax, na.translate = TRUE) +
theme_void() +
labs(color = "Vaccination Status")
# Plot the network with vaccination status using layout_with_kk
ggraph(g, layout = 'kk') +  # Using the Kamada-Kawai layout
geom_edge_link() +
geom_node_point(aes(color = factor(vaccine_status)), size = 3) +
scale_color_manual(values = color_palette_vax, na.translate = TRUE) +
theme_void() +
labs(color = "Vaccination Status")
# Combine ego and alter data
combined_dt <- rbind(
ego_dt[, .(ID = MTURKID, VaccineStatus = FUVA3)],
network_member_dt[, .(ID = alterID, VaccineStatus = SN37)]
)
p <- ggraph(g, layout = "gem") +
geom_edge_link() +
geom_node_point(aes(color = factor(vaccine_status)), size = 3) +
scale_color_manual(values = color_palette_vax, na.translate = TRUE) +
theme_void() +
labs(color = "Vaccination Status")
# Print the plot
print(p)
# Plot the network using the layout_with_graphopt layout
p <- ggraph(g, layout = "graphopt") +
geom_edge_link() +
geom_node_point(aes(color = factor(vaccine_status)), size = 3) +
scale_color_manual(values = color_palette_vax, na.translate = TRUE) +
theme_void() +
labs(color = "Vaccination Status")
# Print the plot
print(p)
# Plot the network using the layout_with_graphopt layout
p <- ggraph(g, layout = "graphopt") +
geom_edge_link() +
geom_node_point(aes(color = factor(vaccine_status)), size = 3) +
scale_color_manual(values = color_palette_vax, na.translate = TRUE) +
theme_void() +
labs(color = "Vaccination Status")
# Print the plot
print(p)
p <- ggraph(g, layout = "graphopt") +
geom_edge_link() +
geom_node_point(aes(color = factor(vaccine_status)), size = 3) +
scale_color_manual(values = color_palette_vax,
labels = c("1" = "At least one dose", "2" = "No doses", "NA" = "Unknown")) +
theme_void() +
labs(color = "Vaccination Status")
# Print the plot
print(p)
p1 <- ggraph(g, layout = "graphopt") +
geom_edge_link() +
geom_node_point(aes(color = factor(vaccine_status)), size = 3) +
scale_color_manual(values = color_palette_vax,
labels = c("1" = "At least one dose", "2" = "No doses", "NA" = "Unknown")) +
theme_void() +
labs(color = "Vaccination Status")+
theme(legend.position = "right",
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 12))
# Print the plot
print(p1)
rm(list=ls())
library(dplyr)
renv::status()
renv::status()
renv::status()
renv::snapshot()
renv::status()
rm(list=ls())
library(dplyr)
data_loc <- "/Volumes/caas/CADRE CLC Data Project5/Clean Data/AK-SU-NETWORKS-ROUT/"
tab2_dt <- as.data.frame(readRDS(paste0(data_loc, "tab2_comparison_data.RDS")))
class(tab2_dt)
dim(tab2_dt)
colnames(tab2_dt)
eda_env <- readRDS(paste0(data_loc, "eda_objects.rds"))
cdc_scores <- eda_env$cdc_scores
tab2_dt <-
tab2_dt %>% mutate(FUSNCONSENT_numeric =
ifelse(is.na(FUSNCONSENT), 0, FUSNCONSENT))
total_fusconsent_7 = sum(tab2_dt$FUSNCONSENT_numeric == 7)
total_fusconsent_7
total_fusconsent_0 = sum(tab2_dt$FUSNCONSENT_numeric == 0)
total_fusconsent_0
t.test(as.numeric(tab2_dt$age[tab2_dt$FUSNCONSENT_numeric == 7]),
as.numeric(tab2_dt$age[tab2_dt$FUSNCONSENT_numeric == 0])
)
table(tab2_dt$gender_3cat)
stats_age <- tab2_dt %>%
mutate(age_numeric = as.numeric(as.character(age))) %>%  # Convert age to numeric
group_by(FUSNCONSENT_numeric) %>%
summarise(
mean_age = mean(age_numeric, na.rm = TRUE),
sd_age = sd(age_numeric, na.rm = TRUE)
)
print(stats_age)
# Convert age to numeric
tab2_dt$age_numeric <- as.numeric(as.character(tab2_dt$age))
# Split data based on FUSNCONSENT_numeric
group1 <- tab2_dt$age_numeric[tab2_dt$FUSNCONSENT_numeric == 0]
group2 <- tab2_dt$age_numeric[tab2_dt$FUSNCONSENT_numeric == 7]
# Perform t-test
t_test_result <- t.test(group1, group2)
print(t_test_result)
tab2_dt %>%
select(gender_3cat, FUSNCONSENT_numeric) %>%
group_by(FUSNCONSENT_numeric)
gender_xtab <-
xtabs(~factor(tab2_dt$gender_3cat)+factor(tab2_dt$FUSNCONSENT_numeric))
chisq.test(gender_xtab)
chisq.test(gender_xtab[1:2, 1:2])
# Filter the data for relevant FUSNCONSENT_numeric values
filtered_data <- tab2_dt %>% filter(FUSNCONSENT_numeric %in% c(0, 7))
# Determine the counts and percentages
race_summary <- filtered_data %>%
group_by(FUSNCONSENT_numeric, race_4cat) %>%
summarise(count = n()) %>%
mutate(total = sum(count),
percentage = (count / total) * 100) %>%
ungroup()
print(race_summary)
race_xtab <-
xtabs(~factor(tab2_dt$race_4cat)+factor(tab2_dt$FUSNCONSENT_numeric))
race_xtab
chisq.test(race_xtab)
chisq.test(race_xtab[c(1, 2, 4),])
ethnicity_xtab <-
xtabs(~factor(tab2_dt$ethnicity)+factor(tab2_dt$FUSNCONSENT_numeric))
ethnicity_xtab
chisq.test(ethnicity_xtab)
# Filter the data for relevant FUSNCONSENT_numeric values
filtered_data <- tab2_dt %>% filter(FUSNCONSENT_numeric %in% c(0, 7))
# Determine the counts and percentages
ethnicity_summary <- filtered_data %>%
group_by(FUSNCONSENT_numeric, ethnicity) %>%
summarise(count = n()) %>%
mutate(total = sum(count),
percentage = (count / total) * 100) %>%
ungroup()
print(ethnicity_summary)
education_xtab <-
xtabs(~factor(tab2_dt$education, exclude = NULL)+
factor(tab2_dt$FUSNCONSENT_numeric, exclude = NULL))
education_xtab
chisq.test(education_xtab)
tab2_dt <- tab2_dt %>%
mutate(recoded_education = case_when(
education %in% c(1, 2) ~ "Some High School or Lower",
education == 3 ~ "High School Completed",
education == 4 ~ "Some College",
TRUE ~ as.character(education)  # to capture other possible values
))
education_xtab <- tab2_dt %>%
group_by(recoded_education, FUSNCONSENT_numeric) %>%
summarise(count = n()) %>%
group_by(FUSNCONSENT_numeric) %>%
mutate(percentage = (count / sum(count)) * 100) %>%
ungroup()
# Create a contingency table
contingency_table <- table(tab2_dt$recoded_education, tab2_dt$FUSNCONSENT_numeric)
# Chi-squared test
chi_squared_result <- chisq.test(contingency_table)
# Print the result
print(chi_squared_result)
table(tab2_dt$income)
# Generate cross-tabulations
income_10_xtab <- xtabs(~income + FUSNCONSENT_numeric, data = filter(tab2_dt, income == "10"))
print(income_10_xtab)
income_11_xtab <- xtabs(~income + FUSNCONSENT_numeric, data = filter(tab2_dt, income == "11"))
print(income_11_xtab)
income_4_xtab <- xtabs(~income + FUSNCONSENT_numeric, data = filter(tab2_dt, income == "4"))
print(income_4_xtab)
income_5_xtab <- xtabs(~income + FUSNCONSENT_numeric, data = filter(tab2_dt, income == "5"))
print(income_5_xtab)
income_6_xtab <- xtabs(~income + FUSNCONSENT_numeric, data = filter(tab2_dt, income == "6"))
print(income_6_xtab)
income_7_xtab <- xtabs(~income + FUSNCONSENT_numeric, data = filter(tab2_dt, income == "7"))
print(income_7_xtab)
income_8_xtab <- xtabs(~income + FUSNCONSENT_numeric, data = filter(tab2_dt, income == "8"))
print(income_8_xtab)
income_9_xtab <- xtabs(~income + FUSNCONSENT_numeric, data = filter(tab2_dt, income == "9"))
print(income_9_xtab)
# Filter the data for relevant FUSNCONSENT_numeric values
filtered_data <- tab2_dt %>% filter(FUSNCONSENT_numeric %in% c(0, 7))
# Determine the counts and percentages
income_summary <- filtered_data %>%
group_by(FUSNCONSENT_numeric, income) %>%
summarise(count = n()) %>%
mutate(total = sum(count),
percentage = (count / total) * 100) %>%
ungroup()
print(income_summary)
income_xtab <-
xtabs(~factor(tab2_dt$income)+factor(tab2_dt$FUSNCONSENT_numeric))
income_xtab
chisq.test(income_xtab)
stats_household_size <- tab2_dt %>%
mutate(household_size_numeric = as.numeric(as.character(household_size))) %>%  # Convert household_size to numeric
group_by(FUSNCONSENT_numeric) %>%
summarise(
mean_household_size = mean(household_size_numeric, na.rm = TRUE),
sd_household_size = sd(household_size_numeric, na.rm = TRUE)
)
print(stats_household_size)
# Convert to numeric
tab2_dt$household_numeric <- as.numeric(as.character(tab2_dt$household_size))
# Split data based on FUSNCONSENT_numeric
group1 <- tab2_dt$household_numeric [tab2_dt$FUSNCONSENT_numeric == 0]
group2 <- tab2_dt$household_numeric[tab2_dt$FUSNCONSENT_numeric == 7]
# Perform t-test
t_test_result <- t.test(group1, group2)
print(t_test_result)
# Filter the data for relevant FUSNCONSENT_numeric values
filtered_data <- tab2_dt %>% filter(FUSNCONSENT_numeric %in% c(0, 7))
# Determine the counts and percentages
essential_worker_summary <- filtered_data %>%
group_by(FUSNCONSENT_numeric, essential_worker) %>%
summarise(count = n()) %>%
mutate(total = sum(count),
percentage = (count / total) * 100) %>%
ungroup()
print(essential_worker_summary)
essential_worker_xtab <-
xtabs(~factor(tab2_dt$essential_worker)+factor(tab2_dt$FUSNCONSENT_numeric))
essential_worker_xtab
chisq.test(essential_worker_xtab)
cdc_scores <- cdc_scores %>% filter(MTURKID != "")
tab2_dt <- tab2_dt %>% filter(MTURK1 != "") # to prevent a many-to-one join issue
# Left join cdc_scores with the relevant columns from tab2_dt
cdc_scores <- cdc_scores %>%
left_join(select(tab2_dt, MTURK1, FUSNCONSENT_numeric),
by = c("MTURKID" = "MTURK1"))
# Extract the cdc_scores for participants with FUSNCONSENT_numeric values of 7 and 0
cdc_avg_out_summary <- cdc_scores %>%
group_by(FUSNCONSENT_numeric) %>%
summarise(mean = mean(cdc_avg_out),
sd = sd(cdc_avg_out))
group1 <- cdc_scores$cdc_avg_out[cdc_scores$FUSNCONSENT_numeric == 7]
group2 <- cdc_scores$cdc_avg_out[cdc_scores$FUSNCONSENT_numeric == 0]
t.test(group1, group2)
# Filter the data for relevant FUSNCONSENT_numeric values
filtered_data <- tab2_dt %>% filter(FUSNCONSENT_numeric %in% c(0, 7))
# Determine the counts and percentages
covid_test_summary <- filtered_data %>%
group_by(FUSNCONSENT_numeric, covid_test) %>%
summarise(count = n()) %>%
mutate(total = sum(count),
percentage = (count / total) * 100) %>%
ungroup()
print(covid_test_summary)
covid_test_xtab <-
xtabs(~factor(tab2_dt$covid_test)+factor(tab2_dt$FUSNCONSENT_numeric))
covid_test_xtab
chisq.test(covid_test_xtab)
# Filter the data for relevant FUSNCONSENT_numeric values
filtered_data <- tab2_dt %>% filter(FUSNCONSENT_numeric %in% c(0, 7) & covid_test == 1)
# Determine the counts and percentages
covid_test_summary <- filtered_data %>%
group_by(FUSNCONSENT_numeric, covid_test) %>%
summarise(count = n()) %>%
mutate(total = sum(count),
percentage = (count / total) * 100) %>%
ungroup()
print(covid_test_summary)
daily_drinking_xtab <-
xtabs(~factor(tab2_dt$daily_drinking, exclude = NULL)+
factor(tab2_dt$FUSNCONSENT_numeric))
daily_drinking_xtab
chisq.test(daily_drinking_xtab)
daily_opioid_xtab <-
xtabs(~factor(tab2_dt$daily_opioid, exclude = NULL)+
factor(tab2_dt$FUSNCONSENT_numeric))
daily_opioid_xtab
chisq.test(daily_opioid_xtab)
daily_stimulant_xtab <-
xtabs(~factor(tab2_dt$daily_stimulant, exclude = NULL)+
factor(tab2_dt$FUSNCONSENT_numeric))
daily_stimulant_xtab
chisq.test(daily_stimulant_xtab)
