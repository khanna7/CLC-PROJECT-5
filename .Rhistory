layout <- layout_with_fr(g)
# Plot the network
plot(g,
layout = layout,
vertex.size = 20, # Increase or adjust as per your need
vertex.label = NA, # No labels
vertex.label.cex = 0.8, # Font size of labels
edge.arrow.size = 0.5,
edge.color = "gray50",
main = "Network Diagram",
vertex.frame.color = "black", # Adds a border
vertex.label.dist = 1.5) # Puts labels a bit far from the nodes
# Plot the network
plot(g,
layout = layout,
vertex.size = 10, # Increase or adjust as per your need
vertex.label = NA, # No labels
vertex.label.cex = 0.8, # Font size of labels
edge.arrow.size = 0.5,
edge.color = "gray50",
main = "Network Diagram",
vertex.frame.color = "black", # Adds a border
vertex.label.dist = 1.5) # Puts labels a bit far from the nodes
# Plot the network
plot(g,
layout = layout,
vertex.size = 10, # Increase or adjust as per your need
vertex.label = NA, # No labels
vertex.label.cex = 0.8, # Font size of labels
edge.arrow.size = 0.5,
edge.color = "gray50",
main = "Network Diagram",
vertex.frame.color = "black", # Adds a border
vertex.label.dist = 1) # Puts labels a bit far from the nodes
# Convert igraph object to data frames suitable for networkD3
nodes <- data.frame(name = V(g)$name,
color = V(g)$color,
group = ifelse(V(g)$name %in% ego_snconsenting_dt$MTURK1, 1, 2))
edges <- get.data.frame(g, what = "edges")[, c("from", "to")]
# Rename columns to 'source' and 'target'
colnames(edges) <- c('source', 'target')
# Convert to zero-based index for networkD3
edges$source <- edges$source - 1
# Convert to numeric
edges$source <- as.numeric(as.character(edges$source))
edges$target <- as.numeric(as.character(edges$target))
# Now shift to zero-based index for networkD3
edges$source <- edges$source - 1
edges$target <- edges$target - 1
# Visualize
forceNetwork(Links = edges, Nodes = nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group',
Nodesize = 30,
legend = TRUE,
zoom = TRUE)
# Visualize
forceNetwork(Links = edges, Nodes = nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group',
legend = TRUE,
zoom = TRUE)
# Convert to numeric
edges$source <- as.integer(edges$source) - 1
edges$target <- as.integer(edges$target) - 1
# Now shift to zero-based index for networkD3
edges$source <- edges$source - 1
edges$target <- edges$target - 1
# Visualize
forceNetwork(Links = edges, Nodes = nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group',
legend = TRUE,
zoom = TRUE)
nodes$id <- 0:(nrow(nodes) - 1)
# Visualize
forceNetwork(Links = edges, Nodes = nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group',
legend = TRUE,
zoom = TRUE)
forceNetwork(Links = edges, Nodes = nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group',
legend = TRUE,
zoom = TRUE)
head(edges)
str(edges)
# Check the first few rows of the data frame used for graph creation
head(ego_alter_paring_merge_dt[, c("MTURK1.x", "MTURK1.y")])
data_loc <- "/Volumes/caas/CADRE CLC Data Project5/Clean Data/AK-SU-NETWORKS-ROUT/"
```
data_loc <- "/Volumes/caas/CADRE CLC Data Project5/Clean Data/AK-SU-NETWORKS-ROUT/"
eda_env <- readRDS(paste0(data_loc, "eda_objects.rds"))
full_ego_dt <- eda_env[["dt"]]
merged_network_participant_env <-
readRDS(paste0(data_loc, "merged_network_participant_objects.rds"))
sns_dt_long_merged_ego_characteristics <-
merged_network_participant_env$sns_dt_long_merged_ego_characteristics
vacces_info_scores <- eda_env$vaccess_info_scores
full_dt <- eda_env$dt
sns_dt_long_merged_ego_characteristics <- merge(sns_dt_long_merged_ego_characteristics,
vacces_info_scores,
by = "MTURKID")
head(colnames(full_dt), 10)
head(colnames(sns_dt_long_merged_ego_characteristics), 10)
(full_dt$FUVA3)
table(full_dt$FUVA3, exclude = NULL)
table(full_dt$FUVA4, exclude = NULL)
xtabs(~factor(FUVA3, exclude = NULL)+factor(FUVA4, exclude = NULL),
data = full_dt)
va3_fusnconsent_xtabs <-
as.matrix(
xtabs(~factor(FUVA3, exclude = NULL)+
factor(FUSNCONSENT, exclude = NULL),
data = full_dt)
)
sweep(va3_fusnconsent_xtabs, 2, colSums(va3_fusnconsent_xtabs), "/")
ego_snconsenting_dt <- full_dt %>%
filter(FUSNCONSENT == 7)
dim(ego_snconsenting_dt)
head(ego_snconsenting_dt$MTURK1, 25)
table(ego_snconsenting_dt$FUVA3, exclude = NULL) #egos
table(ego_snconsenting_dt$FUSNCONSENT, exclude = NULL) #egos
head(sns_dt_long_merged_ego_characteristics$MTURK1, 25) #alters
table(sns_dt_long_merged_ego_characteristics$SN37, exclude = NULL)
## merge data
ego_alter_paring_merge_dt <-
#create dataset that merges ego and network information to give unique ego-alter pairs
merge(ego_snconsenting_dt, sns_dt_long_merged_ego_characteristics, by = "MTURK1", all.x = TRUE)
dim(ego_alter_paring_merge_dt) #851 rows as expected, since there are 851 ego-alter pairings
colnames(ego_alter_paring_merge_dt)
head(ego_alter_paring_merge_dt)
length(unique(ego_alter_paring_merge_dt$MTURK1)) == nrow(ego_snconsenting_dt)
ego_alter_paring_merge_dt[ego_alter_paring_merge_dt$MTURK1 == ego_alter_paring_merge_dt$MTURK1[[1]],]
ego_alter_paring_merge_dt$same_vaccination_state <- ifelse(
ego_alter_paring_merge_dt$FUVA3 == ego_alter_paring_merge_dt$SN37, 1, 0)
### create a frequency table
frequency_table <- table(ego_alter_paring_merge_dt$same_vaccination_state, exclude = NULL)
print(frequency_table)
### compute proportions
proportion_table <- frequency_table / sum(frequency_table)
print(proportion_table)
ego_snconsenting_dt$original_MTurk <- ego_snconsenting_dt$MTURK1
sns_dt_long_merged_ego_characteristics$original_MTurk <- sns_dt_long_merged_ego_characteristics$MTURK1
## ego ID
ego_snconsenting_dt$MTURK1 <- paste0("E_", ego_snconsenting_dt$MTURK1)
## alter ID
sns_dt_long_merged_ego_characteristics <- sns_dt_long_merged_ego_characteristics %>%
group_by(original_MTurk) %>%
mutate(seq = row_number())
sns_dt_long_merged_ego_characteristics$MTURK1 <- paste0("A_", sns_dt_long_merged_ego_characteristics$original_MTurk, "_",
sns_dt_long_merged_ego_characteristics$seq)
## merge
ego_alter_paring_merge_dt <- merge(ego_snconsenting_dt, sns_dt_long_merged_ego_characteristics, by = "original_MTurk", all.x = TRUE)
head(ego_alter_paring_merge_dt[, c("MTURK1.x", "MTURK1.y")])
g <- graph_from_data_frame(d=ego_alter_paring_merge_dt[, c("MTURK1.x", "MTURK1.y")], directed=FALSE)
g
V(g)$color <- ifelse(V(g)$name %in% ego_snconsenting_dt$MTURK1,
ifelse(ego_snconsenting_dt$FUVA3 == 1, "green", "red"),
ifelse(sns_dt_long_merged_ego_characteristics$SN37 == 1, "green", "red")
)
V(g)$shape <- ifelse(V(g)$name %in% ego_snconsenting_dt$MTURK1, "rectangle", "circle")
layout <- layout_with_fr(g)
plot(g,
layout = layout,
vertex.size = 10, # Increase or adjust as per your need
vertex.label = NA, # No labels
vertex.label.cex = 0.8, # Font size of labels
edge.arrow.size = 0.5,
edge.color = "gray50",
main = "Network Diagram",
vertex.frame.color = "black", # Adds a border
vertex.label.dist = 1) # Puts labels a bit far from the nodes
plot(g,
layout = layout,
vertex.size = 10, # Increase or adjust as per your need
vertex.label = NA, # No labels
vertex.label.cex = 0.8, # Font size of labels
edge.arrow.size = 0.5,
edge.color = "gray50",
main = "Network Diagram",
vertex.frame.color = "black", # Adds a border
vertex.label.dist = 1) #
# Plot the network
plot(g,
layout = layout,
vertex.size = 10, # Increase or adjust as per your need
vertex.label = NA, # No labels
vertex.label.cex = 0.8, # Font size of labels
edge.arrow.size = 0.5,
edge.color = "gray50",
main = "Network Diagram",
vertex.frame.color = "black", # Adds a border
vertex.label.dist = 1.5) # Puts labels a bit far from the nodes
plot(g,
layout = layout,
vertex.size = 8, # Increase or adjust as per your need
vertex.label = NA, # No labels
vertex.label.cex = 0.8, # Font size of labels
edge.arrow.size = 0.5,
edge.color = "gray50",
main = "Network Diagram",
vertex.frame.color = "black", # Adds a border
vertex.label.dist = 1.5) # Puts labels a bit far from the nodes
# Convert to data frame
edge_df <- as_data_frame(g, what = "edges")
# Get unique nodes
nodes <- data.frame(name = unique(c(edge_df$from, edge_df$to)))
# Add index column to nodes
nodes <- nodes %>% mutate(index = row_number() - 1)
# Convert node names in edge_df to index
edge_df$from <- match(edge_df$from, nodes$name) - 1
edge_df$to <- match(edge_df$to, nodes$name) - 1
# Rename columns for networkD3
colnames(edge_df) <- c("source", "target")
# Create networkD3 plot
forceNetwork(Links = edge_df, Nodes = nodes, Source = "source", Target = "target",
NodeID = "name", Group = NULL, zoom = TRUE)
str(nodes)
str(edge_df)
str(nodes)
forceNetwork(Links = edge_df, Nodes = nodes, Source = "source", Target = "target",
NodeID = "name", Group = NULL, zoom = TRUE)
forceNetwork(Links = edge_df, Nodes = nodes, Source = "source", Target = "target",
NodeID = "name", zoom = TRUE)
nodes$group <- 1
# Create networkD3 plot
forceNetwork(Links = edge_df, Nodes = nodes, Source = "source", Target = "target",
NodeID = "name", zoom = TRUE)
nodes$group <- 1
forceNetwork(Links = edge_df, Nodes = nodes, Source = "source", Target = "target",
NodeID = "name", zoom = TRUE)
forceNetwork(Links = edge_df, Nodes = nodes, Source = "source", Target = "target",
NodeID = "name", Group = "group", zoom = TRUE, Group = NULL)
forceNetwork(Links = edge_df, Nodes = nodes, Source = "source", Target = "target",
NodeID = "name", Group = "group", zoom = TRUE)
nodes$group <- ifelse(nodes$name %in% ego_snconsenting_dt$MTURK1,
ifelse(ego_snconsenting_dt$FUVA3 == 1, 1, 0),
ifelse(sns_dt_long_merged_ego_characteristics$SN37 == 1, 1, 0))
my_color_scale <- 'd3.scaleOrdinal().domain(["0", "1"]).range(["red", "green"])'
forceNetwork(Links = edge_df, Nodes = nodes, Source = "source", Target = "target",
NodeID = "name", Group = "group", zoom = TRUE, colourScale = my_color_scale)
## copy original MTURK Ids
ego_snconsenting_dt$original_MTurk <- ego_snconsenting_dt$MTURK1
sns_dt_long_merged_ego_characteristics$original_MTurk <- sns_dt_long_merged_ego_characteristics$MTURK1
## ego ID
ego_snconsenting_dt$MTURK1 <- paste0("E_", ego_snconsenting_dt$MTURK1)
## alter ID
sns_dt_long_merged_ego_characteristics <- sns_dt_long_merged_ego_characteristics %>%
group_by(original_MTurk) %>%
mutate(seq = row_number())
sns_dt_long_merged_ego_characteristics$MTURK1 <- paste0("A_", sns_dt_long_merged_ego_characteristics$original_MTurk, "_",
sns_dt_long_merged_ego_characteristics$seq)
## merge
ego_alter_paring_merge_dt <- merge(ego_snconsenting_dt, sns_dt_long_merged_ego_characteristics, by = "original_MTurk", all.x = TRUE)
head(ego_alter_paring_merge_dt[, c("MTURK1.x", "MTURK1.y")])
## create graph
g <- graph_from_data_frame(d=ego_alter_paring_merge_dt[, c("MTURK1.x", "MTURK1.y")], directed=FALSE)
#print(g)
vcount(g)
ecount(g)
#colors
V(g)$color <- ifelse(V(g)$name %in% ego_snconsenting_dt$MTURK1,
ifelse(ego_snconsenting_dt$FUVA3 == 1, "green", "red"),
ifelse(sns_dt_long_merged_ego_characteristics$SN37 == 1, "green", "red")
)
#red=unvaccinated, green=vaccinated
#layout
layout <- layout_with_kk(g)
# Plot the network
plot(g,
layout = layout,
vertex.size = 7,
vertex.label = NA,
edge.arrow.size = 0.5,
edge.color = "gray50",
main = "Network Diagram")
# Convert to data frame
edge_df <- as_data_frame(g, what = "edges")
# Get unique nodes
nodes <- data.frame(name = unique(c(edge_df$from, edge_df$to)))
# Add index column to nodes
nodes <- nodes %>% mutate(index = row_number() - 1)
# Convert node names in edge_df to index
edge_df$from <- match(edge_df$from, nodes$name) - 1
edge_df$to <- match(edge_df$to, nodes$name) - 1
# Rename columns for networkD3
colnames(edge_df) <- c("source", "target")
#Customize the group and color
nodes$group <- ifelse(nodes$name %in% ego_snconsenting_dt$MTURK1,
ifelse(ego_snconsenting_dt$FUVA3 == 1, 1, 0),
ifelse(sns_dt_long_merged_ego_characteristics$SN37 == 1, 1, 0))
my_color_scale <- 'd3.scaleOrdinal().domain(["0", "1"]).range(["red", "green"])'
#graph
forceNetwork(Links = edge_df, Nodes = nodes, Source = "source", Target = "target",
NodeID = "name", Group = "group", zoom = TRUE, colourScale = my_color_scale)
eda_env <- readRDS(paste0(data_loc, "eda_objects.rds"))
full_ego_dt <- eda_env[["dt"]]
merged_network_participant_env <-
readRDS(paste0(data_loc, "merged_network_participant_objects.rds"))
sns_dt_long_merged_ego_characteristics <-
merged_network_participant_env$sns_dt_long_merged_ego_characteristics
vacces_info_scores <- eda_env$vaccess_info_scores
full_dt <- eda_env$dt
## merging
sns_dt_long_merged_ego_characteristics <- merge(sns_dt_long_merged_ego_characteristics,
vacces_info_scores,
by = "MTURKID")
```
edge_df <- as_data_frame(g, what = "edges")
# Get unique nodes
nodes <- data.frame(name = unique(c(edge_df$from, edge_df$to)))
# Add index column to nodes
nodes <- nodes %>% mutate(index = row_number() - 1)
# Convert node names in edge_df to index
edge_df$from <- match(edge_df$from, nodes$name) - 1
edge_df$to <- match(edge_df$to, nodes$name) - 1
# Rename columns for networkD3
colnames(edge_df) <- c("source", "target")
#Customize the group and color
nodes$group <- ifelse(nodes$name %in% ego_snconsenting_dt$MTURK1,
ifelse(ego_snconsenting_dt$FUVA3 == 1, 1, 0),
ifelse(sns_dt_long_merged_ego_characteristics$SN37 == 1, 1, 0))
my_color_scale <- 'd3.scaleOrdinal().domain(["0", "1"]).range(["red", "green"])'
#graph
forceNetwork(Links = edge_df, Nodes = nodes, Source = "source", Target = "target",
NodeID = "name", Group = "group", zoom = TRUE, colourScale = my_color_scale)
# Convert to data frame
edge_df <- as_data_frame(g, what = "edges")
# Get unique nodes
nodes <- data.frame(name = unique(c(edge_df$from, edge_df$to)))
# Add index column to nodes
nodes <- nodes %>% mutate(index = row_number() - 1)
# Convert node names in edge_df to index
edge_df$from <- match(edge_df$from, nodes$name) - 1
edge_df$to <- match(edge_df$to, nodes$name) - 1
# Rename columns for networkD3
colnames(edge_df) <- c("source", "target")
#Customize the group and color
nodes$group <- ifelse(nodes$name %in% ego_snconsenting_dt$MTURK1,
ifelse(ego_snconsenting_dt$FUVA3 == 1, 1, 0),
ifelse(sns_dt_long_merged_ego_characteristics$SN37 == 1, 1, 0))
my_color_scale <- 'd3.scaleOrdinal().domain(["0", "1"]).range(["red", "green"])'
#graph
forceNetwork(Links = edge_df, Nodes = nodes, Source = "source", Target = "target",
NodeID = "name", Group = "group", zoom = TRUE, colourScale = my_color_scale)
library(haven)
library(dplyr)
library(data.table)
library(lme4)
install.packages("geeM")
library(geeM)
install.packages("igraph")
library(igraph)
install.packages("ggraph")
library(ggraph)
library(ggplot2)
install.packages("ggraph")
install.packages("geeM")
data_loc <- "/Volumes/caas/CADRE CLC Data Project5/Clean Data/AK-SU-NETWORKS-ROUT/"
eda_env <- readRDS(paste0(data_loc, "eda_objects.rds"))
full_ego_dt <- eda_env[["dt"]]
merged_network_participant_env <-
readRDS(paste0(data_loc, "merged_network_participant_objects.rds"))
sns_dt_long_merged_ego_characteristics <-
merged_network_participant_env$sns_dt_long_merged_ego_characteristics
vacces_info_scores <- eda_env$vaccess_info_scores
full_dt <- eda_env$dt
## merging
sns_dt_long_merged_ego_characteristics <- merge(sns_dt_long_merged_ego_characteristics,
vacces_info_scores,
by = "MTURKID")
```
eda_env <- readRDS(paste0(data_loc, "eda_objects.rds"))
full_ego_dt <- eda_env[["dt"]]
merged_network_participant_env <-
readRDS(paste0(data_loc, "merged_network_participant_objects.rds"))
sns_dt_long_merged_ego_characteristics <-
merged_network_participant_env$sns_dt_long_merged_ego_characteristics
vacces_info_scores <- eda_env$vaccess_info_scores
full_dt <- eda_env$dt
## merging
sns_dt_long_merged_ego_characteristics <- merge(sns_dt_long_merged_ego_characteristics,
vacces_info_scores,
by = "MTURKID")
head(colnames(full_dt), 10)
head(colnames(sns_dt_long_merged_ego_characteristics), 10)
Variable VA3: summary of whether one shot has been taken for 851 network contacts
(full_dt$FUVA3)
table(full_dt$FUVA3, exclude = NULL)
table(full_dt$FUVA4, exclude = NULL)
xtabs(~factor(FUVA3, exclude = NULL)+factor(FUVA4, exclude = NULL),
data = full_dt)
va3_fusnconsent_xtabs <-
as.matrix(
xtabs(~factor(FUVA3, exclude = NULL)+
factor(FUSNCONSENT, exclude = NULL),
data = full_dt)
)
sweep(va3_fusnconsent_xtabs, 2, colSums(va3_fusnconsent_xtabs), "/")
# straightforward division as va3_fusnconsent_xtabs/colSums...gives the wrong answer
# can be done correctly using apply:
# `apply(va3_fusnconsent_xtabs, 2, function(column) column/sum(column))`
va3_fusnconsent_xtabs/colSums(va3_fusnconsent_xtabs)
xtabs(~factor(FUVA4, exclude = NULL)+
factor(FUSNCONSENT, exclude = NULL),
data = full_dt)
```
(full_dt$FUVA3)
table(full_dt$FUVA3, exclude = NULL)
table(full_dt$FUVA4, exclude = NULL)
xtabs(~factor(FUVA3, exclude = NULL)+factor(FUVA4, exclude = NULL),
data = full_dt)
va3_fusnconsent_xtabs <-
as.matrix(
xtabs(~factor(FUVA3, exclude = NULL)+
factor(FUSNCONSENT, exclude = NULL),
data = full_dt)
)
sweep(va3_fusnconsent_xtabs, 2, colSums(va3_fusnconsent_xtabs), "/")
# straightforward division as va3_fusnconsent_xtabs/colSums...gives the wrong answer
# can be done correctly using apply:
# `apply(va3_fusnconsent_xtabs, 2, function(column) column/sum(column))`
va3_fusnconsent_xtabs/colSums(va3_fusnconsent_xtabs)
xtabs(~factor(FUVA4, exclude = NULL)+
factor(FUSNCONSENT, exclude = NULL),
data = full_dt)
## prep data
ego_snconsenting_dt <- full_dt %>%
filter(FUSNCONSENT == 7)
dim(ego_snconsenting_dt)
head(ego_snconsenting_dt$MTURK1, 25)
table(ego_snconsenting_dt$FUVA3, exclude = NULL) #egos
table(ego_snconsenting_dt$FUSNCONSENT, exclude = NULL) #egos
head(sns_dt_long_merged_ego_characteristics$MTURK1, 25) #alters
table(sns_dt_long_merged_ego_characteristics$SN37, exclude = NULL)
## merge data
ego_alter_paring_merge_dt <-
#create dataset that merges ego and network information to give unique ego-alter pairs
merge(ego_snconsenting_dt, sns_dt_long_merged_ego_characteristics, by = "MTURK1", all.x = TRUE)
dim(ego_alter_paring_merge_dt) #851 rows as expected, since there are 851 ego-alter pairings
colnames(ego_alter_paring_merge_dt)
head(ego_alter_paring_merge_dt)
### check results of merge
length(unique(ego_alter_paring_merge_dt$MTURK1)) == nrow(ego_snconsenting_dt)
ego_alter_paring_merge_dt[ego_alter_paring_merge_dt$MTURK1 == ego_alter_paring_merge_dt$MTURK1[[1]],]
## compute homophily measure:
### egos vaccination status represented by FUVA3 and alters' represented by SN37
### create a column to indicate if ego and alter share the same vaccination state
ego_alter_paring_merge_dt$same_vaccination_state <- ifelse(
ego_alter_paring_merge_dt$FUVA3 == ego_alter_paring_merge_dt$SN37, 1, 0)
### create a frequency table
frequency_table <- table(ego_alter_paring_merge_dt$same_vaccination_state, exclude = NULL)
print(frequency_table)
### compute proportions
proportion_table <- frequency_table / sum(frequency_table)
print(proportion_table)
## copy original MTURK Ids
ego_snconsenting_dt$original_MTurk <- ego_snconsenting_dt$MTURK1
sns_dt_long_merged_ego_characteristics$original_MTurk <- sns_dt_long_merged_ego_characteristics$MTURK1
## ego ID
ego_snconsenting_dt$MTURK1 <- paste0("E_", ego_snconsenting_dt$MTURK1)
## alter ID
sns_dt_long_merged_ego_characteristics <- sns_dt_long_merged_ego_characteristics %>%
group_by(original_MTurk) %>%
mutate(seq = row_number())
sns_dt_long_merged_ego_characteristics$MTURK1 <- paste0("A_", sns_dt_long_merged_ego_characteristics$original_MTurk, "_",
sns_dt_long_merged_ego_characteristics$seq)
## merge
ego_alter_paring_merge_dt <- merge(ego_snconsenting_dt, sns_dt_long_merged_ego_characteristics, by = "original_MTurk", all.x = TRUE)
head(ego_alter_paring_merge_dt[, c("MTURK1.x", "MTURK1.y")])
## create graph
g <- graph_from_data_frame(d=ego_alter_paring_merge_dt[, c("MTURK1.x", "MTURK1.y")], directed=FALSE)
#print(g)
vcount(g)
ecount(g)
#colors
V(g)$color <- ifelse(V(g)$name %in% ego_snconsenting_dt$MTURK1,
ifelse(ego_snconsenting_dt$FUVA3 == 1, "green", "red"),
ifelse(sns_dt_long_merged_ego_characteristics$SN37 == 1, "green", "red")
)
#red=unvaccinated, green=vaccinated
#layout
layout <- layout_with_kk(g)
# Plot the network
plot(g,
layout = layout,
vertex.size = 7,
vertex.label = NA,
edge.arrow.size = 0.5,
edge.color = "gray50",
main = "Network Diagram")
# Convert to data frame
edge_df <- as_data_frame(g, what = "edges")
# Get unique nodes
nodes <- data.frame(name = unique(c(edge_df$from, edge_df$to)))
# Add index column to nodes
nodes <- nodes %>% mutate(index = row_number() - 1)
# Convert node names in edge_df to index
edge_df$from <- match(edge_df$from, nodes$name) - 1
edge_df$to <- match(edge_df$to, nodes$name) - 1
# Rename columns for networkD3
colnames(edge_df) <- c("source", "target")
#Customize the group and color
nodes$group <- ifelse(nodes$name %in% ego_snconsenting_dt$MTURK1,
ifelse(ego_snconsenting_dt$FUVA3 == 1, 1, 0),
ifelse(sns_dt_long_merged_ego_characteristics$SN37 == 1, 1, 0))
my_color_scale <- 'd3.scaleOrdinal().domain(["0", "1"]).range(["red", "green"])'
#graph
forceNetwork(Links = edge_df, Nodes = nodes, Source = "source", Target = "target",
NodeID = "name", Group = "group", zoom = TRUE, colourScale = my_color_scale)
